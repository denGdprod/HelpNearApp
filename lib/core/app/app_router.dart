import 'package:go_router/go_router.dart';
import 'package:helpnear_app/features/root_screen.dart';
import 'package:helpnear_app/features/auth/login_screen.dart';
import 'package:helpnear_app/features/auth/signup_screen.dart';
import 'package:helpnear_app/features/auth/reset_password_screen.dart';
import 'package:helpnear_app/features/auth/verify_email_screen.dart';
import 'package:helpnear_app/features/errors/error_screen.dart';
import 'package:helpnear_app/features/auth/unauthenticated_screen.dart';
import 'package:helpnear_app/core/utils/auth_state_notifier.dart';
import 'package:helpnear_app/features/map/map_screen.dart';
import 'package:helpnear_app/features/profile/create_profile/create_profile_screen.dart';
import 'package:helpnear_app/features/auth/email_verified.dart';
import 'package:helpnear_app/features/profile/profile_screen.dart';
import 'package:helpnear_app/features/profile/edit_profile/edit_profile_screen.dart';
import 'package:helpnear_app/features/loading/splash.dart';
import 'package:helpnear_app/features/profile/medicaldata_screen.dart';
import 'package:flutter/foundation.dart';

GoRouter createRouter(AuthStateNotifier auth) {
  return GoRouter(
    initialLocation: '/splash', // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–∞ Splash —ç–∫—Ä–∞–Ω
    refreshListenable: auth,
    errorBuilder: (context, state) => ErrorScreen(error: state.error),
    routes: [
      // Splash —ç–∫—Ä–∞–Ω
      GoRoute(
        path: '/splash',
        name: 'splash',
        builder: (context, state) => const SplashScreen(),
      ),
      // Root —ç–∫—Ä–∞–Ω —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
      StatefulShellRoute.indexedStack(
        builder: (context, state, navigationShell) =>
            RootScreen(navigationShell: navigationShell),
        branches: [
          StatefulShellBranch(
            routes: [
              GoRoute(
                path: '/map',
                name: 'map',
                builder: (context, state) => const MapScreen(),
              ),
            ],
          ),
          StatefulShellBranch(
            routes: [
              GoRoute(
                path: '/profile',
                name: 'profile',
                builder: (context, state) => const ProfileScreen(), // –°–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
                routes: [
                  GoRoute(
                    path: 'edit',
                    name: 'edit_profile',
                    builder: (context, state) => EditProfileScreen(),                
                  ),
                  GoRoute(
                    path: 'medical_data',
                    name: 'medical_data',
                    builder: (context, state) => const MedicalDataScreen(),
                  ),
                ],
              ),
            ],
          ),
        ],
      ),
      GoRoute(
        path: '/user/:userId',
        name: 'user_profile',
        builder: (context, state) {
          final userId = state.pathParameters['userId']!;
          return ProfileScreen(userId: userId);
        },
      ),
      // –ü—Ä–æ—á–∏–µ —ç–∫—Ä–∞–Ω—ã
      GoRoute(
        path: '/login',
        name: 'login',
        builder: (context, state) => const LoginScreen(),
      ),
      GoRoute(
        path: '/signup',
        name: 'signup',
        builder: (context, state) => const SignUpScreen(),
      ),
      GoRoute(
        path: '/reset_password',
        name: 'reset_password',
        builder: (context, state) => const ResetPasswordScreen(),
      ),
      GoRoute(
        path: '/verify_email',
        name: 'verify_email',
        builder: (context, state) => const VerifyEmailScreen(),
      ),
      GoRoute(
        path: '/email_verified',
        name: '/email_verified',
        builder: (context, state) => const EmailVerifiedScreen(),
      ),
      GoRoute(
        path: '/unauthenticated',
        name: 'unauthenticated',
        builder: (context, state) => const UnauthenticatedScreen(),
      ),
      GoRoute(
        path: '/create_profile',
        name: 'create_profile',
        builder: (context, state) => CreateProfileScreen(),
      ),
    ],
    // –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    redirect: (context, state) {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∞ –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
      debugPrint('üß≠ Redirect triggered');
      debugPrint('üîÅ Current location: ${state.uri.path}');
      debugPrint('üîê isLoading: ${auth.isLoading}');
      debugPrint('üë§ isAuthenticated: ${auth.isAuthenticated}');
      debugPrint('üìß isEmailVerified: ${auth.isEmailVerified}');
      debugPrint('üìÑ isProfileCreated: ${auth.isProfileCreatedSync ?? false}');

      // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
      if (auth.isLoading) return null;

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–µ —Ñ–ª–∞–≥–∏
      final isAuth = auth.isAuthenticated;
      final isEmailVerified = auth.isEmailVerified;
      final isProfileCreated = auth.isProfileCreatedSync ?? false;
      final currentLocation = state.uri.path;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å –º–∞—Ä—à—Ä—É—Ç–æ–º –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      final isAuthRoute = [
        '/login',
        '/signup',
        '/reset_password',
        '/verify_email',
        '/unauthenticated',
        '/email_verified',
      ].contains(currentLocation);

      final isMain = [
        '/profile',
        '/map'
      ].contains(currentLocation);

      // –†–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (!isAuth) {
        debugPrint('üö´ Not authenticated, redirecting if needed...');
        return isAuthRoute ? null : '/unauthenticated';
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (isAuth) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ email
        if (!isEmailVerified) {
          debugPrint('‚úâÔ∏è Email not verified, redirecting if needed...');
          return currentLocation == '/verify_email' ? null : '/verify_email';
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if (!isProfileCreated) {
          debugPrint('üìã Profile not created, redirecting if needed...');
          return currentLocation == '/create_profile' ? null : '/create_profile';
        }
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç –≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ
        if (auth.isAuthenticated && isAuthRoute || currentLocation == '/splash') {
          debugPrint('‚úÖ Auth complete, but on auth route. Redirecting to /map...');
          return '/map'; // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        }
      }
      // –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω
      debugPrint('üëå No redirect needed');
      return null;
    }
  );
}
