import 'dart:async';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AuthStateNotifier extends ChangeNotifier {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  User? _user;
  bool _isLoading = true;
  bool _isInitialized = false; // –§–ª–∞–≥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  late final StreamSubscription<User?> _authSub;
  bool _emailWasJustVerified = false;
  bool? _isProfileCreatedCache;

  AuthStateNotifier() {
    _authSub = _auth.authStateChanges().listen(_handleAuthStateChanged);
  }

  bool get isLoading => _isLoading;
  bool get isInitialized => _isInitialized; // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Ñ–ª–∞–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  User? get user => _user;
  bool get isAuthenticated => _user != null;
  bool get isEmailVerified => _user?.emailVerified ?? false;
  bool get emailWasJustVerified => _emailWasJustVerified;

  bool? get isProfileCreatedSync => _isProfileCreatedCache ?? false;

  Future<void> checkProfileCreated() async {
    if (_user == null) {
      _isProfileCreatedCache = false;
      debugPrint('üö´ [ProfileCheck] No user, profile not created.');
      return;
    }

    debugPrint('üîÑ [ProfileCheck] Checking profile for user: ${_user!.uid}');
    try {
      final doc = await _firestore.collection('users').doc(_user!.uid).get();
      _isProfileCreatedCache = doc.exists && (doc.data()?['profileCreated'] == true);
      debugPrint('‚úÖ [ProfileCheck] Profile created: $_isProfileCreatedCache');
    } catch (e) {
      debugPrint('‚ùå [ProfileCheck] Error checking profile: $e');
      _isProfileCreatedCache = false;
    } finally {
      notifyListeners();
    }
  }
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  Future<void> _handleAuthStateChanged(User? user) async {
    debugPrint('üîÑ [AuthStateChanged] user: ${user?.uid ?? 'null'}');
    _setLoading(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ true
    _user = user;

    if (_user != null) {
      debugPrint('‚úÖ [AuthStateChanged] User is authenticated: ${_user!.uid}');

      try {
        debugPrint('üîÑ [AuthStateChanged] Reloading user...');
        await _user!.reload();
        _user = _auth.currentUser;
        debugPrint('üîÑ [AuthStateChanged] User reloaded: ${_user?.uid ?? 'null'}');

        await checkProfileCreated();

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
        if (_user!.emailVerified && !_emailWasJustVerified) {
          debugPrint('‚úÖ [AuthStateChanged] Email verified!');
          _emailWasJustVerified = true;
          //_startEmailVerifiedFlagTimer();
        }
      } catch (e) {
        debugPrint('‚ùå [AuthStateChanged] Error during auth state change: $e');
        if (e is FirebaseAuthException && e.code == 'user-not-found') {
          debugPrint('‚ùå [AuthStateChanged] User not found, signing out...');
          await _auth.signOut();
          _user = null;
        }
      }
    } else {
      debugPrint('üö´ [AuthStateChanged] No user found, signing out...');
      _isProfileCreatedCache = false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    _isInitialized = true;
    _setLoading(false); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ false
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  Future<void> refreshUser() async {
    debugPrint('üîÑ [RefreshUser] Refreshing user...');
    try {
      _setLoading(true);
      await _user?.reload();
      _user = _auth.currentUser;
      debugPrint('‚úÖ [RefreshUser] User refreshed: ${_user?.uid ?? 'null'}');
    } catch (e) {
      debugPrint('‚ùå [RefreshUser] Error refreshing user: $e');
      if (e is FirebaseAuthException && e.code == 'user-not-found') {
        await _auth.signOut();
        _user = null;
        debugPrint('‚ùå [RefreshUser] User not found, signed out.');
      }
    } finally {
      _setLoading(false); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ false
      notifyListeners(); // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    }
  }

  // –ú–∞—Ä–∫–µ—Ä, —á—Ç–æ email –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
  void markEmailVerificationComplete() {
    debugPrint('‚úÖ [EmailVerification] Marking email verification complete.');
    _emailWasJustVerified = false;
    notifyListeners();
  }

  // –¢–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ emailWasJustVerified
  // void _startEmailVerifiedFlagTimer() {
  //   debugPrint('üîÑ [EmailVerification] Starting email verification flag timer...');
  //   Timer(const Duration(seconds: 10), () {
  //     _emailWasJustVerified = false;
  //     debugPrint('‚úÖ [EmailVerification] Email verification flag reset.');
  //     notifyListeners();
  //   });
  // }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
  void _setLoading(bool value) {
    if (_isLoading != value) {
      debugPrint('üîÑ [SetLoading] Changing loading state: $value');
      _isLoading = value;
      notifyListeners();
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  Future<void> signOut() async {
    debugPrint('üîÑ [SignOut] Signing out...');
    try {
      await _auth.signOut();
      _user = null;
      debugPrint('‚úÖ [SignOut] User signed out.');
    } catch (e) {
      debugPrint('‚ùå [SignOut] Error signing out: $e');
    } finally {
      notifyListeners();
    }
  }

  void finishSplash() {
    notifyListeners(); // –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Ç–æ–º—É, —á—Ç–æ GoRouter —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
  }

  @override
  void dispose() {
    debugPrint('üîÑ [Dispose] Disposing AuthStateNotifier...');
    _authSub.cancel();
    super.dispose();
  }
}
